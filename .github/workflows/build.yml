name: CI

on:
  push:
    branches:
      - '**'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build-windows:
    runs-on: windows-2025
    defaults:
      run:
        shell: bash
    steps:
      - name: Download Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.8.3
          dir: output/windows-msvc_64

      - name: Download Nlohmann-Json
        run: |
          curl -L https://github.com/nlohmann/json/archive/refs/tags/v3.12.0.tar.gz | tar -xz
          mkdir json-build
          cmake -S json-3.12.0 -B json-build -G "MinGW Makefiles" -DJSON_BuildTests=OFF -DCMAKE_INSTALL_PREFIX=output/windows-msvc_64/json-3.12.0 -DCMAKE_BUILD_TYPE=Release
          cmake --build json-build --target install

      - name: Download Catch
        run: |
          curl -L https://github.com/catchorg/Catch2/archive/refs/tags/v2.13.10.tar.gz | tar -xz
          mkdir catch-build
          cmake -S Catch2-2.13.10 -B catch-build -G "MinGW Makefiles" -DCATCH_BUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=output/windows-msvc_64/catch-2.13.10 -DCMAKE_BUILD_TYPE=Release
          cmake --build catch-build --target install

      - name: Write CMake file
        uses: frdrwrt/write-to-file@v1.3
        with:
          filepath: output/windows-msvc_64/paths.cmake
          mode: 0666
          content: |
            set(
                CMAKE_PREFIX_PATH
                ${CMAKE_CURRENT_LIST_DIR}/Qt/6.8.3/msvc2022_64/lib/cmake
                ${CMAKE_CURRENT_LIST_DIR}/catch-2.13.10/lib/cmake
                ${CMAKE_CURRENT_LIST_DIR}/json-3.12.0/share/cmake
            )

      - uses: vimtor/action-zip@v1
        with:
          files: output
          dest: windows-msvc_64.zip

      - uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: windows-msvc_64.zip

  build-linux:
    runs-on: ubuntu-24.04
    steps:
      - name: Download Nlohmann-Json
        run: |
          curl -L https://github.com/nlohmann/json/archive/refs/tags/v3.12.0.tar.gz | tar -xz
          mkdir json-build
          cmake -S json-3.12.0 -B json-build -DJSON_BuildTests=OFF -DCMAKE_INSTALL_PREFIX=output/linux-gcc_64/json-3.12.0 -DCMAKE_BUILD_TYPE=Release
          cmake --build json-build --target install
          
      - name: Download Catch
        run: |
          curl -L https://github.com/catchorg/Catch2/archive/refs/tags/v2.13.10.tar.gz | tar -xz
          mkdir catch-build
          cmake -S Catch2-2.13.10 -B catch-build -DCATCH_BUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=output/linux-gcc_64/catch-2.13.10 -DCMAKE_BUILD_TYPE=Release
          cmake --build catch-build --target install

      - name: Write CMake file
        uses: frdrwrt/write-to-file@v1.3
        with:
          filepath: output/linux-gcc_64/paths.cmake
          mode: 0666
          content: |
            set(
                CMAKE_PREFIX_PATH
                ${CMAKE_CURRENT_LIST_DIR}/catch-2.13.10/lib/cmake
                ${CMAKE_CURRENT_LIST_DIR}/json-3.12.0/share/cmake
            )
          
      - uses: vimtor/action-zip@v1
        with:
          files: output
          dest: linux-gcc_64.zip

      - uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: linux-gcc_64.zip

  build-macos:
    runs-on: macos-14
    steps:
      - name: Download Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.8.3
          dir: output/macos-clang_64

      - name: Download Nlohmann-Json
        run: |
          curl -L https://github.com/nlohmann/json/archive/refs/tags/v3.12.0.tar.gz | tar -xz
          mkdir json-build
          cmake -S json-3.12.0 -B json-build -DJSON_BuildTests=OFF -DCMAKE_INSTALL_PREFIX=output/macos-clang_64/json-3.12.0 -DCMAKE_BUILD_TYPE=Release
          cmake --build json-build --target install

      - name: Download Catch
        run: |
          curl -L https://github.com/catchorg/Catch2/archive/refs/tags/v2.13.10.tar.gz | tar -xz
          mkdir catch-build
          cmake -S Catch2-2.13.10 -B catch-build -DCATCH_BUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=output/macos-clang_64/catch-2.13.10 -DCMAKE_BUILD_TYPE=Release
          cmake --build catch-build --target install

      - name: Write CMake file
        uses: frdrwrt/write-to-file@v1.3
        with:
          filepath: output/macos-clang_64/paths.cmake
          mode: 0666
          content: |
            set(
                CMAKE_PREFIX_PATH
                ${CMAKE_CURRENT_LIST_DIR}/Qt/6.8.3/macos/lib/cmake
                ${CMAKE_CURRENT_LIST_DIR}/catch-2.13.10/lib/cmake
                ${CMAKE_CURRENT_LIST_DIR}/json-3.12.0/share/cmake
            )

      - uses: vimtor/action-zip@v1
        with:
          files: output
          dest: macos-clang_64.zip

      - uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: macos-clang_64.zip

  develop-release:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: windows-artifact
      - uses: actions/download-artifact@v4
        with:
          name: linux-artifact
      - uses: actions/download-artifact@v4
        with:
          name: macos-artifact

      - name: Create release
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: ${{ secrets.RELEASE_TOKEN }}
          automatic_release_tag: latest
          prerelease: true
          title: Development Build
          files: |
            *.zip

  tagged-release:
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: windows-artifact
      - uses: actions/download-artifact@v4
        with:
          name: linux-artifact
      - uses: actions/download-artifact@v4
        with:
          name: macos-artifact

      - name: Create release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.RELEASE_TOKEN }}
          draft: true
          files: |
            *.zip

